# -*- coding: utf-8 -*-
"""Untitled23.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/16OMNm1sIGh6YyZCHa4yq3MBCxwDp-Yuv
"""

import csv
from tabulate import tabulate

class MedicineOrder:
    def __init__(self, medication, quantity):
        self.medication = medication
        self.quantity = quantity
        self.status = "Pending"

    def track_order(self):
        print(f"Order Details - Medication: {self.medication}, Quantity: {self.quantity}, Status: {self.status}")

    def generate_receipt(self):
        print(f"\nReceipt - Order ID: {id(self)}")
        print(f"Medication: {self.medication}")
        print(f"Quantity: {self.quantity}")
        print("Payment Details:")
        print("Amount: $50")  # Assuming a fixed amount for simplicity

class Appointment:
    def __init__(self, doctor, appointment_date, patient_name):
        self.doctor = doctor
        self.appointment_date = appointment_date
        self.patient_name = patient_name
        self.payment_status = "Pending"
        self.appointment_charge = doctor.get("charges", 0)  # Get charges from the selected doctor

    def make_payment(self):
        print("\nPayment Details:")
        print(f"Amount: ${self.appointment_charge}")
        payment_confirmation = input("Confirm payment? (yes/no): ")
        if payment_confirmation.lower() == "yes":
            self.payment_status = "Completed"
            print("Payment successful!")

    def generate_receipt(self):
        print(f"\nReceipt - Appointment with {self.doctor['doctor_name']}")
        print(f"Appointment Date: {self.appointment_date}")
        print(f"Patient Name: {self.patient_name}")
        print(f"Appointment Charge: ${self.appointment_charge}")
        print("Payment Status: Completed")

def read_symptoms_csv(csv_file):
    symptoms_db = []

    with open(csv_file, "r") as file:
        reader = csv.DictReader(file)
        for row in reader:
            disease = row["Disease"]
            symptoms = [symptom.strip() for symptom in row["Symptoms"].split(',')]
            medication = row.get("Medication", "")
            symptoms_db.append({'disease': disease, 'symptoms': symptoms, 'medication': medication})

    return symptoms_db

def identify_diseases(user_symptoms, symptoms_db):
    matching_diseases = []

    for entry in symptoms_db:
        common_symptoms = set(user_symptoms) & set(entry['symptoms'])

        if common_symptoms:
            matching_diseases.append(entry)

    return matching_diseases

def map_specialty_to_diseases(specialty_diseases, matching_diseases):
    matching_specialties = set()

    for disease_entry in matching_diseases:
        for specialty, diseases in specialty_diseases.items():
            if disease_entry['disease'] in diseases:
                matching_specialties.add(specialty)

    return matching_specialties

def read_doctor_csv(csv_file):
    doctors = []

    with open(csv_file, "r") as file:
        reader = csv.DictReader(file)
        for row in reader:
            doctor_name = row["DoctorName"]
            specialty = row["Specialty"]
            phone_number = row["PhoneNumber"]
            address = row["Address"]
            charges = row["Charges"]
            doctors.append({'doctor_name': doctor_name, 'specialty': specialty, 'phone_number': phone_number, 'address': address, 'charges': charges})

    return doctors

def suggest_doctor(matching_specialties, doctors):
    suggested_doctors = []

    for entry in doctors:
        if entry['specialty'] in matching_specialties:
            suggested_doctors.append(entry)

    return suggested_doctors

def display_table(header, data):
    table = []
    for entry in data:
        table.append([entry.get('doctor_name', ''), entry.get('specialty', ''), entry.get('phone_number', ''), entry.get('address', ''), entry.get('charges', '')])
    print(tabulate(table, headers=header, tablefmt='grid'))

def display_table1(header, data):
    table = []
    for entry in data:
        table.append([entry['disease'], ', '.join(entry['symptoms']), entry['medication']])
    print(tabulate(table, headers=header, tablefmt='grid'))

def book_appointment(doctor):
    print("\nAppointment Booking for Doctor:")
    display_table(["Doctor Name", "Specialty", "Phone Number", "Address", "Charges"], [doctor])

    appointment_date = input("\nEnter preferred appointment date (YYYY-MM-DD): ")
    patient_name = input("Enter your name: ")

    print(f"\nAppointment booked with {doctor['doctor_name']} on {appointment_date}.")
    appointment = Appointment(doctor, appointment_date, patient_name)

    appointment.make_payment()
    appointment.generate_receipt()

    feedback_response = input("Would you like to provide feedback? (yes/no): ")
    if feedback_response.lower() == "yes":
        feedback = input("Please provide your feedback: ")
        print("Thank you for your feedback!")

    print(f"\nThank you, {patient_name}! We look forward to seeing you at your appointment.")

def order_medicines(possible_diseases):
    print("\nMedicine Order:")
    display_table1(["Disease", "Symptoms", "Medication"], possible_diseases)

    medication = input("\nEnter the medication you want to order: ")
    quantity = int(input("Enter the quantity: "))

    order = MedicineOrder(medication, quantity)
    print(f"Order placed successfully. Order ID: {id(order)}")

    track_order_response = input("Do you want to track your order? (yes/no): ")
    if track_order_response.lower() == "yes":
        order.track_order()
        order.generate_receipt()

        feedback_response = input("Would you like to provide feedback? (yes/no): ")
        if feedback_response.lower() == "yes":
            feedback = input("Please provide your feedback: ")
            print("Thank you for your feedback!")

    print("\nThank you for ordering with us!")

def chatbot():
    print("Hi! Describe your symptoms, and I will try to identify possible conditions.")

    user_symptoms = input("What symptoms are you experiencing? ").lower().split(', ')

    symptoms_db = read_symptoms_csv("/content/symptons.csv")

    possible_diseases = identify_diseases(user_symptoms, symptoms_db)

    if possible_diseases:
        print("\nPossible condition(s):")
        display_table1(["Disease", "Symptoms", "Medication"], possible_diseases)

        # Mapping specialties to diseases
        specialty_diseases = {
            "Endocrinologist": ["Diabetes", "Hyperthyroidism", "Hypothyroidism"],
            "Cardiologist": ["Hypertension", "Coronary Artery Disease"],
            "Dermatologist": ["Fungal Infection", "Acne", "Psoriasis", "Eczema", "Melanoma"],
            "Pediatrician": ["Common Cold"],
            "Neurologist": ["Migraine", "Stroke", "Multiple Sclerosis"],
            "Gynecologist": ["Ovarian Cyst", "Endometriosis"],
            "Orthopedic Surgeon": ["Osteoarthritis"],
            "Psychiatrist": ["Anxiety Disorder", "Depression"],
            "Ophthalmologist": ["Hypertension"],
            "ENT Specialist": ["Allergic Rhinitis"],
            "Urologist": ["Urinary Tract Infection (UTI)"],
            "Gastroenterologist": ["Gastroenteritis", "Peptic Ulcer", "Gastroesophageal Reflux Disease (GERD)", "Diverticulitis"],
            "Rheumatologist": ["Osteoarthritis", "Rheumatoid Arthritis"],
            "Dentist": ["Dental issues"],
            "General Surgeon": ["Coronary Artery Disease", "Appendicitis", "Colon Cancer", "Stomach Cancer", "Pancreatic Cancer", "Liver Cancer"],
            "Allergist": ["Allergic Rhinitis"],
            "Oncologist": ["Melanoma", "Leukemia", "Breast Cancer", "Lung Cancer", "Colon Cancer", "Stomach Cancer", "Pancreatic Cancer", "Brain Tumor", "Cervical Cancer", "Esophageal Cancer", "Lymphoma", "Myeloma", "Sarcoma", "Mesothelioma"],
            "Podiatrist": ["Melanoma"],
            "Nephrologist": ["Hypertension", "Kidney Stones"],
            "Pulmonologist": ["Asthma", "Pneumonia", "Chronic Obstructive Pulmonary Disease (COPD)"],
            # ... Add more specialties and their associated diseases as needed
        }

        matching_specialties = map_specialty_to_diseases(specialty_diseases, possible_diseases)

        if matching_specialties:
            print("\nMatching Specialties:")
            print(", ".join(matching_specialties))

            # Suggest doctors based on specialties
            doctor_data = read_doctor_csv("/content/doc_details.csv")
            suggested_doctors = suggest_doctor(matching_specialties, doctor_data)

            if suggested_doctors:
                print("\nSuggested Doctors:")
                display_table(["Doctor Name", "Specialty", "Phone Number", "Address", "Charges"], suggested_doctors)

                book_appointment_response = input("Do you want to book an appointment with a suggested doctor? (yes/no): ")
                if book_appointment_response.lower() == "yes":
                    doctor_choice = int(input("Enter the number of the doctor you want to book an appointment with: ")) - 1
                    if 0 <= doctor_choice < len(suggested_doctors):
                        selected_doctor = suggested_doctors[doctor_choice]
                        book_appointment(selected_doctor)
                    else:
                        print("Invalid choice. No appointment booked.")
                else:
                    order_medicines_response = input("Do you want to order medicines for the suggested conditions? (yes/no): ")
                    if order_medicines_response.lower() == "yes":
                        order_medicines(possible_diseases)
                    else:
                        print("No appointment or order placed. Thank you!")
            else:
                print("\nNo suggested doctors found.")
        else:
            print("\nNo matching specialties found.")
    else:
        print("\nNo diseases identified based on your symptoms")

if __name__ == '__main__':
    chatbot()